@page "/"
@using System.Net.Http
@inject HttpClient Http


<div class="todo-container">
<h1>desktop-task-list</h1>
<div class="todo-input">
    <input type="text" @bind="newName" placeholder="Enter New ToDo"/>
    <button @onclick="AddTodo">Add</button>
    </div>  
    

@foreach (var todo in todoItems)
{
    <div class="todo-item">
        <div 
        class="@(todo.IsComplete ? "todo-item__text complete" : "todo-item__text")" 
        @onclick="@(() =>MarkAsComplete(todo))">
        @todo.Name
        </div>
        <div class="todo-item__close" @onclick="@(() => DeleteTodo(todo.Id))">&times;</div>
    </div>
}
</div>
<!--
@foreach (var todo in todos)
{

    <div class="todo-item">
        <div class="todo-item__text">@todo</div>
        <div class="todo-item__close" @onclick="RemoveTodo">&times;</div>
    </div>
}
-->

@code
{
    private const string ServiceEndpoint = "https://localhost:5001/data/todo";
    public string newName {get; set; }
    // public List<Todo> todos = new List<Todo>();
    
    private Todo editTodo = new Todo();
    
    private Todo[] todoItems;

    protected override async Task OnInitializedAsync() => await GetTodos();

    private async Task GetTodos() => todoItems = await Http.GetFromJsonAsync<Todo[]>(ServiceEndpoint);

    private async Task AddTodo()
    {
        var addTodo = new Todo { Name = newName, IsComplete = false };
        await Http.PostAsJsonAsync("data/todo",newName);
        newName = "";
    }

    private async Task SaveTodo(){
        await Http.PutAsJsonAsync($"{ServiceEndpoint}/{editTodo.Id}", editTodo);
        await GetTodos();
    }

    private async Task DeleteTodo(long id){
        await Http.DeleteAsync($"{ServiceEndpoint}/{id}");
        await GetTodos();
    }
    
    private class Todo {
        public long Id { get; set; }
        public string Name { get; set; }
        public bool IsComplete { get; set; }
    }
    private void MarkAsComplete(Todo todo)
    {
        todo.IsComplete = !todo.IsComplete;
    }
}
